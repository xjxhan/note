vim编辑器
  命令模式下移动光标：键盘上下左右键，Home键，End键
  命令模式下行间跳转：
    1G或gg：到全文第一行
    G：到全文最后一行
    10G：到全文第10行
  命令模式下复制、粘贴：
    yy：复制一行
    3yy：复制3行
    p：粘贴到当前行
  命令模式下删除：
    x：删除但个字符
    d^:删除到行首
    d$：删除到行尾
    dd：删除一行
    3dd：删除3行
  命令模式下查找关键词
    /bin：搜索关键词bin（n，N切换结果）
  命令模式下大写C可以删除光标之后，并且进入输入模式
  末行模式下：r /etc/passwd ，可以读入/etc/passwd文件

date +%F：只显示年月日

磁道：track
扇区：sectir  默认512字节
blkid：查看文件系统类型
UUID：设备的唯一标识
fdisk：分区
lsblk：查看分区
df：显示挂载分区的使用情况
partprobe:刷新磁盘分区
mkfs：格式化命令

/etc/fstab:开机自动挂载配置文件
/etc/shells：存储shell系统
/etc/samba/smb.conf：samba配置文件

PV：物理卷
VG：卷组
LV：逻辑卷
PE:卷组划分空间的单位
pvcreate:物理卷分区
pvscan:查看分区
pvs:查看分区状态
vgcreate:创建卷组
lvcreate：创建逻辑卷
lvextend:扩展延伸逻辑卷
vgextend:扩展延伸卷组

lvs:空间大小
df-h：文件系统大小

resize2fs:针对ext4文件系统
xfs_growfs:针对xfs文件系统

扩展逻辑卷:
  有足够空间---直接扩展逻辑卷---文件系统扩展
  没有足够空间---先扩展卷组---扩展逻辑卷---文件系统扩展
逻辑卷也可以做缩减

服务协议：
    http：超文本传输协议   默认端口：80
    https：安全的超文本传输协议  默认端口：443
    ftp：文件传输协议（用于数据传输）  默认端口：21
    tftp：简单的文件传输协议  默认端口：69
    telnet：远程管理协议  默认端口：23
    DNS：域名解析协议  默认端口：53
    smtp：用户发邮件协议  默认端口：25
    pop3：用户收邮件协议  默认端口：110
    snmp：简单的网络管理协议  默认端口：161

################################################################################

一块硬盘的“艺术”之旅
  识别硬盘=>分区规划=>格式化=>挂载使用

 一.识别硬盘

[root@server0 ~]# lsblk    #列出所有  块设备
NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
vda    253:0    0  10G  0 disk 
└─vda1 253:1    0  10G  0 part /
vdb    253:16   0  10G  0 disk 

  二.分区规划

分区的模式：MBR：最大支持容量为2.2TB的磁盘
          GPT：最大支持容量为18EB的磁盘     #两者不能共存

MBR：
  1.1～4个主分区，或者0～3个主分区+1个扩展分区（n个逻辑分区）
  2.最大支持容量为2.2TB的磁盘
  3.扩展分区不能格式化
  4.理论值是4个主分区，实际运用划分3个主分区
分区：fdisk
  # fdisk -l /dev/vdb
fdisk 硬盘设备  #修改
[root@server0 ~]# fdisk /dev/vdb
  n 创建主的分区------>回车------>回车------>回车------在last结束时+2G
  p 查看分区表
  n 创建主的分区------>回车------>回车------>回车------在last结束时+2G
  p 查看分区表
  d 删除分区
  w 保存并退出
[root@server0 ~]# lsblk    #查看分区
NAME   MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
vda    253:0    0  10G  0 disk 
└─vda1 253:1    0  10G  0 part /
vdb    253:16   0  10G  0 disk 
├─vdb1 253:17   0   2G  0 part 
└─vdb2 253:18   0   1G  0 part
[root@server0 ~]# ls /dev/vdb[1-2]
/dev/vdb1  /dev/vdb2

  三.格式化，赋予空间文件系统

文件系统：ext4 、 xfs  空间存储数据的规则
mkfs：格式化命令
mkfs.ext4   #格式化ext4文件系统
mkfs.vfat----古老的文件系统（u盘）

[root@server0 ~]# mkfs.ext4 /dev/vdb1    #格式花文件系统ext4
[root@server0 ~]# mkfs.xfs /dev/vdb2    #格式花文件系统xfs
[root@server0 ~]# blkid /dev/vdb1    #查看文件系统及UUID
/dev/vdb1: UUID="a197e269-06a1-4d2d-9481-c2cc950f7345" TYPE="ext4" 
[root@server0 ~]# blkid /dev/vdb2    #查看文件系统及UUIDS
/dev/vdb2: UUID="34de7bed-7765-4f28-958e-3fdef728e8cd" TYPE="xfs"

blkid：查看文件系统类型
UUID：设备的唯一标识

  四.利用挂载提供访问点

查看以挂载的所有分区的使用情况
[root@server0 ~]# mkdir /mypart1
[root@server0 ~]# mount /dev/vdb2 /mypart1
[root@server0 ~]# df -h

df：显示挂载分区的使用情况
  -h：显示易读变量（k，M，G）
/dev/sda5:SCSI设备第一块硬盘的第一个逻辑分区

  五.开机自动挂载
/etc/fstab:修改开机自动挂载配置文件

设备路径  挂载点  文件系统  参数  备份标记(1备份,0不备份)  检测顺序（1检测，0不检测）
/dev/vdb1 /mypart1 ext4 defaults 0 0
/dev/vdb2 /mypart2 ext4 defaults 0 0

[root@server0 ~]# vim /etc/fstab
/dev/vdb1 /mypart1 ext4 defaults 0 0
/dev/vdb2 /mypart2 ext4 defaults 0 0
[root@server0 ~]# df -h
[root@server0 ~]# mount -a
[root@server0 ~]# df -h

# mount -a    #检测/etc/fstab开机自动挂载配置文件，格式是否正确
                  #检测/etc/fstab书写完成，但当前没有挂载的设备，进行挂载

  六.继续分区

综合分区：划分一个2G分区，四个1G分区
# fdisk /dev/vdb
  p 查看分区表
  n 创建主分区------>回车------>回车------>回车------在last结束时+1G
  P 查看分区表
  n 创建扩展分区------>回车------>起始回车------>结束回车   #将所有空间给扩展分区
  p 查看分区表
  n 创建逻辑分区------>回车------>起始回车------结束+1G
  n 创建逻辑分区------>回车------>起始回车------结束+1G
  p 查看分区表
  w 保存并退出
[root@server0 ~]# lsblk    #查看分区
[root@server0 ~]# partprobe     #刷新磁盘分区
	
partprobe:刷新磁盘分区

********************************************************************
请将第三个主分区，格式化成xfs文件系统，分区开机自动挂载/mypart3
请将第一个逻辑分区，格式化成xfs文件系统，分区开机自动挂载/mypart5
请将第二个逻辑分区，格式化成xfs文件系统，分区开机自动挂载/mypart6
[root@server0 ~]# mkdir /mypart3
[root@server0 ~]# mkdir /mypart5
[root@server0 ~]# mkdir /mypart6
[root@server0 ~]# mkfs.xfs /dev/vdb3
[root@server0 ~]# mkfs.xfs /dev/vdb5
[root@server0 ~]# mkfs.xfs /dev/vdb6
[root@server0 ~]# vim /etc/fstab 
[root@server0 ~]# df -h
[root@server0 ~]# mount -a
[root@server0 ~]# df -h                                       
**********************************************************************

#####################################################################################

parted 分区工具
GPT分区模式：128个主分区，最大18EB容量
  1EP = 1000PB、1PB = 1000T、1T = 1000GiB、1GiB = 1024M、1GB = 1000M
# qemu-img creat -f qcow2 /var/lib/libvirt/images/haha.img   #创建虚拟的磁盘
# qemu-img info /var/lib/libvirt/images/haha.img   #查看

# parted /dev/vdb
(parted) mktable gpt    #指定分区模式
(parted) print          #输出分区信息（支持缩写p）
(parted) mkpart         #划分新分区（见名知意）
  分区名称？ [ ]?haha       #分区的名字
  文件系统类型？ [ ]?ext4    #文件系统，无实际意义
  起始点？0 （上一个分区的结束是下一个分区的起始）
  结束点？2G
  警告: The resulting partition is not properly aligned for best performance.
  略/Ignore/放弃/Cancel？Ignore
(parted) unit GB        #利用GB作为分区单位
(parted) quit           #退出
rm  #删除
#####################################################################################

图形添加一个60G 硬盘
  1.关闭虚拟机server0
  2.图形添加硬盘
[root@server0 ~]# lsblk

  3.分区

#####################################################################################

LVM逻辑卷：
  作用1.空间可以扩大 2.集合分散的空间
  
  工作方式：  
    零散空闲存储------集合的虚拟磁盘------虚拟的分区
    物理卷（pv）    卷组（gv）     逻辑卷（lv）
    将众多的物理卷，组成卷组，再从卷组中划分逻辑卷

PV：物理卷
VG：卷组
LV：逻辑卷
PE:卷组划分空间的单位

pvcreate:物理卷分区
pvscan:查看分区
pvs:查看分区状态
vgcreate:创建卷组
lvcreate：创建逻辑卷
lvextend:扩展延伸

#####################################################################################

一.逻辑卷的创建
[root@server0 ~]# pvcreate /dev/vdc1 /dev/vdc2   #分区vdc1，vdc2
                  pvcreate /dev/vdc[1,2]
[root@server0 ~]# pvs        #查看分区状态
[root@server0 ~]# vgcreate myvg /dev/vdc1 /dev/vdc2  #把vdc1，vdc2组成myvg卷组
[root@server0 ~]# vgs        #查看

  1.直接创建卷组   (格式化的分区不能在组卷组)
  命令格式：vgcreate  卷组名  分区路径

[root@server0 ~]# vgcreate myvg /dev/vdc[1-2]   #创建卷组
[root@server0 ~]# vgs   #查看卷组信息
[root@server0 ~]# pvs   #查看物理卷信息

  2.创建逻辑卷
  命令格式：lvcreate  -L  大小  -n  逻辑卷名字  卷组名

[root@server0 ~]# lvcreate  -L 16G -n vo myvg  #在myvg卷组里创建16G的逻辑卷名为vo
[root@server0 ~]# vgs
[root@server0 ~]# lvs

  3.查看使用逻辑卷(格式化和开机自动挂载)

[root@server0 ~]# mkfs.ext4 /dev/myvg/vo   #以ext4文件系统格式化/dev/myvg/vo
[root@server0 ~]# mkdir /mylv
[root@server0 ~]# vim /etc/fstab           #编辑开机自动挂载
/dev/myvg/vo /mylv ext4 defaults 0 0
[root@server0 ~]# mount -a                 #自动挂载
[root@server0 ~]# df -h

#############################################################################

扩展逻辑卷:
  有足够空间---直接扩展逻辑卷---文件系统扩展
  没有足够空间---先扩展卷组---扩展逻辑卷---文件系统扩展
lvextend:扩展延伸

  一.卷组有足够的剩余空间
1.直接扩展逻辑卷空间
[root@server0 ~]# lvextend -L 19G /dev/myvg/vo
[root@server0 ~]# lvs
[root@server0 ~]# vgs

2.文件系统的扩展
resize2fs:针对ext4文件系统
xfs_growfs:针对xfs文件系统
[root@server0 ~]# blkid /dev/myvg/vo        #查看文件系统
[root@server0 ~]# resize2fs /dev/myvg/vo    #刷新
[root@server0 ~]# df -h

  二.卷组没有足够的剩余空间
1.先扩展卷组空间
[root@server0 ~]# vgextend myvg /dev/vdc3    
[root@server0 ~]# vgs

2.再扩展逻辑卷空间
[root@server0 ~]# lvextend -L 25G /dev/myvg/vo
[root@server0 ~]# lvs
[root@server0 ~]# vgs

3.文件系统的扩展
resize2fs:针对ext4文件系统
xfs_growfs:针对xfs文件系统
[root@server0 ~]# blkid /dev/myvg/vo        #查看文件系统
[root@server0 ~]# resize2fs /dev/myvg/vo    #刷新
[root@server0 ~]# df -h

###########################################################################

逻辑卷也可以做缩减
  1.xfs文件系统不支持缩减 、 ext4支持
  lvreduce:缩减
  vgchange:修改

  PE:卷组划分空间的单位  默认4M
vgdisplay myvg:查看卷组详细信息
  创建卷组的时候设置PE大小
vgcreate -s PE大小  卷组名  空闲分区
  创建逻辑卷的时候指定PE个数
lvcreate -l PE个数 -n 逻辑卷名 卷组名
[root@server0 ~]# vgchange -s 1M myvg   #修改PE的大小
[root@server0 ~]# vgdisplay myvg  #查看PE大小
[root@server0 ~]# lvcreate -l 50 -n lvtest01 myvg  #在myvg卷组里建大小为50PE的逻辑卷lvteat01
[root@server0 ~]# lvs

lvremove：删除逻辑卷
vgremove:删除卷组
先删除逻辑卷---删除卷组
[root@server0 ~]# umount /mylv   #卸载
[root@server0 ~]# lvremove /dev/myvg/vo  #删除逻辑卷
Do you really want to remove active logical volume vo? [y/n]: y
[root@server0 ~]# lvremove /dev/myvg/lvtest01 
Do you really want to remove active logical volume lvtest01? [y/n]: y
[root@server0 ~]# vgremove /dev/myvg   #删除卷组

请创建一个50个PE大小的逻辑卷 datebase

##################################################################################

shell脚本编程
  shell语言
  脚本：一个可以执行的文件，执行实现某种功能
/etc/shells：存储shell系统

请用shell语言实现一个脚本，运行结果在屏幕输出hello world
[root@server0 ~]# vim /root/hello.sh
echo helle world
[root@server0 ~]# chmod +x /root/hello.sh    #赋予所有人执行权限
[root@server0 ~]#  /root/hello.sh    #绝对路径运行

规范shell脚本的一般组成
  #！环境声明
  #注释文本
  可执行文本

重定向输出
  >：将前面命令的正确输出，进行重定向
  2>：将前面命令的错误输出，进行重定向
  &>：将前面命令的正确和错误输出，进行重定向
  >&2：修改为错误输出

echo 123 | passwd --stdin zhangsan    #非交互设置密码

黑洞设备：/dev/null   #搜集不要的输出信息，并进行粉碎
	
################################################################################

变量：用来存储非固定值的载体，它具有一个值，以及零个或多个属性
      会变化的量，类似于容器，以不变的名字，存储可以变化的值  
语法格式：name=[value]
          变量名=变量值
引用变量值：$变量名
查看变量值：echo $变量名、echo ${变量名}

[root@server0 ~]# a=rhel
[root@server0 ~]# echo $a
rhel
[root@server0 ~]# echo ${a}7
rhel7

  $[ ]：可以进行运算(+,-,*,/(默认取整)) 、^：指数运算
# echo $[2+5]
7
# echo 2^3 | bc
8
  %：取余运算,数学上：余数一定小于除数
  $()与``反撇号：将命令的输出结果作为参数
# date +%F
2018-05-09
# mkdir $(date +%F)
# ls
# mkdir `hostname`-`date +%F`
# ls

  ' '：取消特殊字符的意义

date +%F：只显示年月日

定义/赋值变量：
  1.变量名称必须以字母、数字和下划线组成，区分大小写
  2.等号两边不要有空格
  3.不能以数字开头，不要适用关键字和特殊字符
  4.若指定的变量以存在，相当于为此变量重新赋值

[root@server0 ~]# vim /root/user.sh
#!/bin/bash
abc=nsd02
useradd $abc &> /dev/null
echo 用户$abc创建成功
echo 123 | passwd --stdin $abc &> /dev/null
echo 用户$abc密码设置成功
[root@server0 ~]# /root/user.sh

产生交互：为了脚本使用难度降低，方便用户随意输入参数
  read：记录用户在键盘上的输入，并传递值赋予变量
    -p:添加相应的提示信息
  格式：read -p '提示信息：' 变量名

[root@server0 ~]# vim /root/user.sh 
#!/bin/bash
read -p '请输入您要创建的用户名:' abc
useradd $abc &> /dev/null           #调用变量abc
echo 用户$abc创建成功
echo 123 | passwd --stdin $abc &> /dev/null
echo 用户$abc密码设置成功
[root@server0 ~]# /root/user.sh

###################################################################################

变量的种类：PWD 、 PATH 、 USER 、 LOGNAME 、 SHELL 、 HOME
  环境变量：变量名一般都大写，由系统定义完成，直接使用即可
  位置变量：由系统定义完成，直接使用即可
  预定义变量：由系统定义完成，直接使用即可
  自定义变量：用户自定义的变量

环境变量：必须大写
  USER：永远储存当前登录的用户名
  PATH：提供命令搜寻路径（执行命令时，会到PATA变量值路径中寻找改程序，如果找到就执行，如果找不到输出未找到）
位置变量：
  1,2,3,4,5,6,7,8,9，……
[root@server0 /]# vim /root/2.sh
#!/bin/bash
cat -n $1 | head -$2
[root@server0 /]# /root/2.sh /etc/passwd 3
     1	root:x:0:0:root:/root:/bin/bash
     2	bin:x:1:1:bin:/bin:/sbin/nologin
     3	daemon:x:2:2:daemon:/sbin:/sbin/nologin
预定义变量：
  $#：已加载的位置变量的个数（求和所有位置变量个数）
  $*：所有位置变量的值
  $?：程序退出后的状态值，0表示正常，其他值异常，判断上面命令是否执行成功

[root@server0 /]# vim /root/2.sh
#!/bin/bash
cat -n $1 | head -$2
echo $#  #求和变量数
echo $*  #所有位置变量值
[root@server0 /]# /root/2.sh /etc/passwd 4 a b c d
     1	root:x:0:0:root:/root:/bin/bash
     2	bin:x:1:1:bin:/bin:/sbin/nologin
     3	daemon:x:2:2:daemon:/sbin:/sbin/nologin
     4	adm:x:3:4:adm:/var/adm:/sbin/nologin
6                  #求和变量数
/etc/passwd 4 a b c d    #所有位置变量值

  $?：程序退出后的状态值，0表示正常，其他值异常,判断上面命令是否执行成功
[root@server0 /]# ping -c 2 172.25.0.11
[root@server0 /]# echo $?
0

##############################################################################

条件测试：[ 测试表达式 ]    echo $?:判断真假（为0真，否则为假）
  常用测试选项：   
      检查文件状态：
        -e：文档存在为真    [ -e /etc ]
        -d：文档存在，且目录为真  [ -d /etc ]
        -f：文档存在，且文件为真  [ -f /etc/passwd ]
        -r：文档存在，且具备读取权限为真
        -w：文档存在，且具备写入权限为真
        -x：文档存在，且具备执行权限为真
          !：取反  [ ! -f /etc/passwd ]  #文件不存在为真
      比较整数大小：greater(大于) 、 little(小于) 、 equal(等于)
        -gt：大于
        -ge：大于等于
        -eq：等于
        -ne：不等于
        -lt：小于
        -le：小于等于
      字符串比对：
          ==：字符串相等为真  [ root == $USER ]
         ！=：字符串不相等为真  [ root != redhat]

###############################################################################

if选择结构：单分支，双分支，多分支

  if单分支处理：
        if [条件表达式];then 
             命令序列xx       
        fi

  if双分支处理：
        if [条件表达式];then 
             命令序列xx
        elif [条件表达式];then
             命令序列yy
        fi

  if多分支处理：
        if [条件表达式];then 
             命令序列xx
        elif [条件表达式];then
             命令序列yy
        elif [条件表达式];then
             命令序列aa
           ……
        else
             命令序列zz
        fi

##############################################################################

for循环：可以反复执行重复性的操作
  1.for （变量; 条件; 计数器）        
      动作                         
  2.for 变量 in 条件1 条件2 条件3 
    do
       命令序列
    done
  3.for 变量 in stu{1..3}
    do
       命令序列
    done

Linux造数：{起始..结束}

#####################################################################################

系统安全保护：
  SELinux：安全机制
  防火墙策略管理

SELinux：安全机制
  增强Linux系统安全的强制访问控制体系mount
  基于LINUX内核（2.6及以上）运行

SELinux运行模式的切换
  运行模式：enforcing(强制) 、 permissive(宽松) 、 disabled(彻底禁用)
  修改为disabled(彻底禁用)状态，必须需要通过重启系统
切换运行模式：
  getenforce ：查看状态
  临时切换：setenforce 1|0
  固定配置：/etc/selinux/config 文件

虚拟机server0:  （虚拟机desktop0 同等操作）
  1.临时修改SELinux状态为permissive(宽松)模式
root@desktop0 ~]# getenforce    
Enforcing
[root@desktop0 ~]# setenforce 0
[root@desktop0 ~]# getenforce
Permissive
[root@desktop0 ~]# vim /etc/selinux/config
SELINUX=permissive
  2.修改固定配置文件：/etc/selinux/config    #每次开机状态文件 

##############################################################################

配置用户环境，永久别名的定义
  用户个性化配置文件：
    影响指定用户的 bash 解释环境
     ～/.bashrc，每次开启 bash 终端时生效
        /root/.bash
  全局环境配置
    影响所有用户的 bash 解释环境
     /etc/bashrc，每次开启 bash 终端时生效

[root@server0 ~]# vim /root/.bashrc 
alias hello='echo hello'
[root@server0 ~]# vim /home/student/.bashrc
alias hi='echo hi'
[root@server0 ~]# vim /etc/bashrc
alias nsd='echo hello world'
  关闭终端，重新开启一个终端进行远程管理gos
    root用户可以执行hello与nsd
    student用户可以执行hi与nsd

###############################################################################

防火墙策略管理

搭建web服务
服务端：server0虚拟机
  1.安装可以提供web服务软件
    Apache（httpd） 、 Nginx 、 Tomcat
  2.启动 httpd 服务
  3.测试
[root@server0 ~]# firefox 172.25.0.11
  4.书写一个文件页面
   /var/www/html：默认存放网页文件的路径
   index.html：默认网页文件的命令
[root@server0 ~]# vim /var/www/html/index.html
<center><font color=red><h2>阳光正好，微风不燥

   marquee：动态

搭建FTP服务
  1.安装一个可以提供FTP功能的软件
# yum -y install vsftpd
  2.启动 httpd 服务
  3.测试
# firefox ftp：//172.25.0.11    #默认可以看到pub目录
  /var/ftp：默认FTP共享路径

################################################################################

RHEL7防火墙：隔离作用：过滤所有的入站请求，允许出站
  硬件防火墙
  软件防火墙：firewalld

firewalld：管理工具
  firewall-cmd（命令） 、 firewall-config（图形）

根据多在的网络场所分区，预设保护规则集
  public：仅允许访问本机的sshd、dhcp、ping服务
  trusted：允许任何访问
  block：阻塞任何来访请求，明确回绝
  drop：丢弃任何来访的数据包，直接丢弃不给回应，最节省资源

防火墙的判定：（匹配及停止）
  1.防火墙或查看请求中的原ip地址，再查询本防火墙所有区域中，
    哪一个区域有该原ip地址的规则，则进入该区域
  2.进入默认区域（public）

防火墙的修改：
  默认区域的修改：
firewall-cmd --get-default-zone         #查看
firewall-cmd --set-default-zone=区域名   #修改

*************************************************************************

虚拟机server0
# firewall-cmd --get-default-zone    #查看默认区域
虚拟机desktop0
# ping -c 2 172.25.0.11              #可以ping通
虚拟机server0
# firewall-cmd --set-default-zone=block   #修改默认区域为block
# firewall-cmd --get-default-zone         #查看
虚拟机desktop0
# ping -c 2 172.25.0.11                   #不可以ping通，有回应
虚拟机server0
# firewall-cmd --set-default-zone=drop    #修改默认区域drop
# firewall-cmd --get-default-zone         #查看
虚拟机desktop0
# ping -c 2 172.25.0.11                   #不可以ping通，无回应

************************************************************************

服务的添加：
# firewall-cmd --zone=public --list-all   #查看该区域里所有规则
# firewall-cmd --zone=public --add-service=http       #添加服务

*************************************************************************

虚拟机server0
# firewall-cmd --set-default-zone=public    #更改
# firewall-cmd --get-default-zone           #查看
虚拟机desktop0
# firewakll 172.25.0.11         #无法访问
# firewall ftp：//172.25.0.11   #无法访问
虚拟机server0
# firewall-cmd --zone=public --list-all   #查看该区域所有规则
# firewall-cmd --zone=public --add-service=http    #添加http服务协议
虚拟机desktop0
# firewakll 172.25.0.11    #可以访问
# firewall ftp：//172.25.0.11   #不可以访问
虚拟机server0
# firewall-cmd --zone=public --add-service=ftp    #添加ftp服务协议     
# firewall-cmd --zone=public --list-all   #查看该区域所有规则  
虚拟机desktop0
# firewakll 172.25.0.11     #可以访问
# firewall ftp：//172.25.0.11    #可以访问

************************************************************************

############################################################################

防火墙策略的服务永久设置
  permanent：永久
# firewall-cmd --reload    #重新加载防火墙所有配置
# firewall-cmd --zone=public --list-all
# firewall-cmd --permanent --zone=public --add-sersice=http  #添加永久服务协议
# firewall-cmd --zone=public --list-all
# firewall-cmd --reload 
# firewall-cmd --zone=public --list-all

###########################################################################

源ip地址的添加
虚拟机server0
# firewall-cmd --zone=block --add-source=172.25.0.10   #添加源（source）ip172.25.0.10
# firewall-cmd --zone=block --list-all
虚拟机desktop0
# firefox 172.25.0.11   #不可以访问
# ping 172.25.0.11   #不可以ping通
真机
# firewall 172.25.0.11   #可以访问
# ping -c 2 172.25.0.11  #可以ping通

################################################################################

防火墙设置方式：
  严格：默认区域设置为drop，允许的放入trusted区域
  宽松：默认区域设置为trusted，拒绝的单独放入drop区域

防火墙的端口转发：
  端口：利用编号，标识一个服务或程序

*****************************************************************

客户端访问172.25.0.11：5423服务端将其请求转发给80端口
# firewall-cmd --reload
# firewall-cmd --permanent --zone=public --add-forward-port=port=5423:proto=tcp:toport=80 #端口转发
# firewall-cmd --reload
# firewall-cmd --zone=public --list-all

****************************************************************

###############################################################################

配置IPv6地址
  ipv4地址：32个二进制，用.（点）分分隔4个部分，4个十进制数表示
  ipv6地址：128个二进制，用：（冒号）分隔8个部分，每部分化成4个16进制数，前64主机位，后64网络位
  和ipv4配置方法一样
  ping6：ping IPv6是否能够通信

##############################################################################

samba服务基础，配置SMB共享（跨平台的共享：Windows 与 Linux）
  为客户机提供共享使用的文件夹
  协议：SMB（TCP 139）（验证用户）、 CIFS（TCP 445）（传输数据）
  软件包：samba
  系统服务：smb

管理共享帐号：
samba用户：专用来访问共享文件夹的用户
  采用独立设置的密码
  但需要提前建立同名的系统用户（可以不设密码）
添加用户：pdbedit -a 用户名
查看用户：pdbedit -L 用户名
删除用户：pdbedit -x 用户名

虚拟机server0：
# useradd harry
# useradd kenji
# useradd chihiro
# pdbedit -a harry    #添加为samba帐号
# pdbedit -a kenji    #添加为samba帐号
# pdbedit -a chihiro    #添加为samba帐号
# pdbedit -L    #查看用户

/etc/samba/smb.conf：samba配置文件
[自定共享名]
path = 文件夹绝对路径
public = no|yes  默认no
borwseable = yes|no   默认yes
read only = yes|no  默认yes
write list = 用户  默认任何用户  #只读的共享
hosts allow = 客户机地址   #允许
hosts deny = 客户机地址    #拒绝

修改配置文件/etc/samba/smb.conf
  workgroup = STAFF
  [common]
  path = /common

修改SELinux策略，布尔值（功能的开关）
  需要加 -P 选项才能实现永久设置
  getsebool：查看 SELinux 开关
  setsebool：修改 SELinux 开关
  getsebool -a | grep samba   #查看有关 samba 功能
  setsebool samba_export_all_ro on   #修改 samba 所有功能为on

客户机desktop0：
samba-client:
smbclient：测试
smbclient -L 用户名 :列出共享名
smbclient -U 用户名（绝对路径）：查看共享文件夹

[root@desktop0 ~]# smbclient -U harry //172.25.0.11/common

更加科学的访问方式mount挂载
客户端desktop0
  1.安装一个可以支持挂载 smb 资源的软件
   cifs-utils：软件包
# mount -o user=harry,pass=123 //172.25.0.11/common /mnt/test   #手动挂载
  2.开机自动挂载
   samba 文件类型：cifs
# vim /etc/fstabs
//172.25.0.11/common /mnt/test cifs defaults,user=harry,pass=123,_netdev 0 0
   _netdev :声明网络设备
  再开机启动时，首先开启网络服务后，再进行挂载本设备

读写的samba共享：
虚拟机server0
  创建共享目录
  修改配置文件：/etc/samba/smb.conf
  [devops]
  path = /devops
  write list = chihiro
  重启 smb 服务
  修改SELinux策略
客户机desktop0
  自动挂载
  

#############################################################################

客户端访问服务端资源
  1.防火墙
  2.服务本身的访问控制
  3.SELinux策略
  4.本地目录的权限（本地的权限）

#############################################################################

multiuser机制：为所有普通用户设计
  作用：客户端挂载时，以权限较小的用户认证。必要时，可以通过指令进行用户身份的切换

  mount.cifs 的挂载参数
  nultiuser：提供对客户端多个用户身份的区分支持
  sec=nelmssp：提供NT局域网管理安全支持
  cifscreds：提交新的用户凭据并测试
  cifscreds add|update -u 共享用户名 服务器地址

#############################################################################

配置NFS共享：不支持跨平台
  Network file system,网络文件系统
  为客户机提供共享使用的文件夹
  协议：NFS（TCP/UDP 2049） 、 RPC（TCP/UDP 111）
  软件包：nfs-utils
  系统服务：nfs-server

只读的 NFS 共享
虚拟机server0
  1.安装nfs-utils
  2.创建共享目录
  3.修改配置文文件NFS：/etc/exports
    文件夹路径  客户机地址（权限） 客户机地址（权限）
    /public     *(ro)
     绝对路径   所有人只读访问
  4.重启服务
客户端desktop访问
does not exist：不存在
  1.自动挂载
# vim /etc/fstab
172.25.0.11:/public /mnt/nfsmount nfs defaults,_netdev 0 0

##############################################################################

准备交换分区：
虚拟机server0
  1.划分新的分区
  2.添加交换空间
    swapon -s：查看
    mkswap：格式化
    swapon：启用激活
    swaponff：停用
# swapon -s    #查看swap空间组成 成员
# mkswap /dev/vdb1   #格式化交换文件系统
# swapon /dev/vdb1   #启用swap空间 成员
# swapon -s    #查看
  3.完成开机自动启用
# vim /etc/fstab
/dev/vdb1 swap swap defaults 0 0
设备路径    挂载点 文件类型 
# swapon -a：开机自动启用

交换空间（swap）：相当于虚拟内存
  当物理内存不够用时，使用磁盘空间来模拟内存
  在一定程度上缓解内存不足的问题
  交换分区：以空闲分区充当的交换空间
  交换条件：以文件模拟的设备充当的交换空间

##############################################################################

配置聚合链接（网卡绑定、链路聚合）：备份网卡，防止单点故障
  team：聚合链接（组队）
  轮询式（roundrobin）的流量负载均衡
  热备份（activebackup）连接冗余

热备份（activebackup）连接冗余
配置文件的准备
  为聚合连接提供配置（类型、连接名、运行器、ip地址）
1.创建虚拟网卡team0  # man teamd.conf  #全文搜索/example
# nmcli connection add type team con-name team0 ifname team0 autoconnect yes 
  config '{"runner": {"name": "activebackup"}}'
  
  nmcli connection 添加 类型 为组队
  配置文件名 team0 ifconfig显示的名字为 team0 开机自启动
  配置为'{"runner": {"name": "activebackup"}}'（热备份方式）
# nmcli connection show   #查看

如果敲错：
# cmcli connection delete team0  #删除重做

2.添加成员
# nmcli connection add type team-slave con-name team0-1 ifname eth1 master team0
# nmcli connection add type team-slave con-name team0-2 ifname eth2 master team0
  
  nmcli connection 添加 类型 为team的成员
  配置文件名 为team0-1 网卡为 eth2 主设备 为team0

如果敲错：
# cmcli connection delete team0-1  #删除重做

3.配ip地址
# nmcli connection modify team0 ipv4.method manual ipv4.addresses 192.168.1.1/24  
  connection.autoconnect yes

4.激活所有的配置
# nmcli connection up team0
# nmcli connection up team0-1
# nmcli connection up team0-2
# ifconfig team0

5.专业检测team0命令
# teamdctl team0 state
# ifconfig eth1 down

##############################################################################

ISCSI共享存储：SCSI网络磁盘：SCSI
一种基于C/S架构的虚拟磁盘技术

backstore，后端存储：对应到服务端提供实际存储空间的设备，需要起一个管理名称
target，磁盘组：是客户端的访问目标，作为一个框架，由多个lun组成
lun，逻辑单元：每一个lun需要关联到某一个后端存储设备，在客户端会视为一块虚拟硬盘
  
虚拟机server0：
1.划分一个5G的分区
2.构建iscsi共享存储服务端
  安装一个服务端软件：targetcli
  运行targetcli命令进行配置
  建立后端存储,为后端存储命名为nsd
/> backstores/block create nsd /dev/vdb1
Created block storage object nsd using /dev/vdb1.
/> ls
  建立target磁盘组
  iqn(ISCSI Qualified Name)：名称规范
  iqn.yyyy-mm.倒序域名：自定义标识
  用来识别target磁盘组，也用来识别客户机身份
/> iscsi/ create iqn.2018-05.example.com:server
/> ls
  lun需要关联
/> iscsi/iqn.2018-05.example.com:server/tpg1/luns create /backstores/block/nsd
/> ls
  ACL访问控制,客户端声称的名字
/> iscsi/iqn.2018-05.example.com:server/tpg1/acls create iqn.2018-05.example.com:abc
/> ls
  启用ip地址与端口
/> iscsi/iqn.2018-08.example.com:server/tpg1/portals create 172.25.0.11
/> ls
/> exit   #保存并退出
3.重启服务target，设置开机自启动

客户端desktop0：
  访问服务端共享存储
1.安装一个客户端软件：iscsi-initiator-utils
# yum repolist    #产生缓存
# yum -y  install iscsi(tab)
2.修改配置文件：/etc/iscsi/initiatorname.iscsi
  InitiatorName=iqn.2018-05.example.com:abc      #指定客户端声称的名字
3.重启iscsid服务，该服务只是刷新客户端iqn名称
4.发现服务端贡献存储 
# iscsiadm --mode discoverydb --type sendtargets --portal 172.25.0.11 --discover
5.重启 iscsi 加载共享存储

##############################################################################

数据库服务基础：
  存放数据的仓库，数据库中有很多的库，库里有很多的表格
  表字段（表头）与表记录（每一个记录）
  常见的关系型，数据库管理系统
  微软：SQL Server
  IBM：DB2
  甲骨文： Oracle、MySQL
  社区开源版：MariaDB
部署mariaDB数据库
1.安装 mariadb-server 数据主程序
2.启动mariadb服务，设置开机自启动
  mariadb与mysql数据库，默认端口为3306
3.进入mariadb数据库，默认情况下没有密码
# mysql 
MariaDB [(none)]> show databases    #查看所有库
MariaDB [(none)]> create database nsd1804   #创建nsd1804库
MariaDB [(none)]> drop database nsd1804     #删除nsd1804库
4.在linux命令行mariadb数据库，设置数据库管理员密码
  数库库管理员：名root，对mariadb数据库最高权限的用户，信息存放在mysql库
  系统管理员：名root，对linux系统最高权限的用户，信息存放在/etc/passwd
为帐号数据库设置密码：
  mysqladmin -u 用户名 -p 旧密码 password "新密码"
# mysqladmin -u root password "123"    #交互式
# mysql -u root -p123    #非交互式
5.MariaDB 主配置文件：/etc/my.cnf
  skip-networking：跳过网络监听
6.表的操作：增（insert）、删（delete）、改（update）、查（select）
# mysql -u root -p123
MariaDB [(none)]> shouw databases;
MariaDB [(none)]> use mysql;     #切换到mysql库里
MariaDB [(none)]> show tables;   #列出表里有哪些表
MariaDB [(none)]> desc user;     #查看表结构
  select * from user;   #user表里所有字段
MariaDB [mysql]> select user,host,password from mysql.user;
  select 表字段1，表字段2 from 库名.表名
7.导入（恢复）数据库数据
  导出/备份数据库
    mysqldump -u 用户名 -p密码 数据库名 > 备份文件.sql
  导入/恢复到数据库
    mysql -u 用户名 -p密码 数据库名 < 备份文件.sql
# wget http://classroom.example.com/pub/materials/users.sql
# mysql -u root -p123 nsd < users.sql
# mysql -u root -p123
> use nsd;
> show tables;
> select * from base;
> select * from location;
8.数据库表查询，有条件的查询
  select * from base where 表字段='值'
> select * from base where name='tom';
  多个条件之间
  and （同时满足）、or（满足其中一个即可）
> select * from base where password='123' or password='456';
> select * from base where name='tom' and password='123';
9.数据库的授权
  grant 权限列表 on 数据库.表名 to 用户名@客户机地址 identified by ‘密码’;
> grant select on nsd.* to lisi@localhost identified by '123';
  #当lisi从localhost本地登录数据库输入密码123，将会获得nsd库中所有表的查询权限
> select user,host,password from mysql.user where user='lisi';   #查看表记录
[root@server0 ~]# mysql -u lisi -p123

##############################################################################

> select count(*) from base,location where base.name='Barbara' and location.city='Sunnyvale' and base.id=location.id;   #多表查询

> insert base values('6','Barbara','789');   #插入字段

禁止空密码root用户访问mariadb 数据库
> use mysql;
> select user,host,password from user;
> select user,host,password from user where password='';
> delete from user where password='';   #删除表记录
> select user,host,password from user; 
> flush pribileges;   #刷新数据库user表信息

##############################################################################

HTTP服务基础
  web通信基本概念：基于B/S（Browser/Server）架构的网意思页服务
  服务端提供网页、浏览器下在并显示网页
  超文本标记语言：html、超文本传输协议：http
  软件包：httpd
  系统服务：httpd
提供的默认配置：
  Listen：监听地址端口（80）
  ServerName：本地点注册的DNS名称（空缺）
  DocumentRroot：网页根目录（var/www/html）
  DirectoryIndex:起始页/首页文件名（index.html）
虚拟机server0：
1.安装httpd软件包
2.启动httpd服务
3.书写一个页面文件
  默认的网页文件路径：/var/www/html
  默认的网页文件名：index.html
4.配置文件：/etc/httpd/conf/httpd.conf
          /etc/httpd/conf.d/*.conf
  Include conf.d/*.conf   #调用配置文件

ServerName：本地点注册的DNS名称（空缺）
  1.修改配置文件：/etc/httpd/conf/httpd.conf
  ServerName server0.example.com:80    #注释去掉
    vim末行模式下set nu ：开启行号
  2.重启httpd服务
  3.测试利用域名访问
  # firefox server0.example.com

DocumentRroot：网页文件的根目录（var/www/html）  
  1.创建目录书写页面
# mkdir /var/www/myweb
# echo wo shi myweb > /var/www/myweb
# cat /var/www/myweb
  2.修改配置文件：/etc/httpd/conf/httpd.conf
  DocumentRoot "/var/www/myweb"    
    vim末行模式下set nu ：开启行号
  3.重启httpd服务
  34.测试利用域名访问
  # firefox server0.example.com

##############################################################################
web网站部署
虚拟web主机：让一台服务器，提供多个网站
虚拟web主机构建方式
  1.基于域名的区分方式
  2.基于端口的区分方式
  3.基于ip的区分方式

1.基于域名的区分方式
  建立新的调用配置文件：/etc/httpd/conf.d/nsd01.conf
  <VirtualHost ip地址：端口>

  <VirtualHost *：80>            #在所有网卡启用80端口
  ServerName www0.example.com    #指定网卡域名
  DocumentRoor /var/www/nsd01    #指定网页文件路径
  </VirtualHost>

  <VirtualHost *：80>
  ServerName webapp0.example.com
  DocumentRoor /var/www/nsd02
  </VirtualHost>
  创建目录
  # mkdir /var/www/nsd01 /var/www/nsd02
  重启httpd服务
  验证
  # nslookup www0.example.com
  # nslookup webapp0.example.com
注意：一旦启用虚拟web主机功能，所有的站点都必须用虚拟web主机来实现

###############################################################################

web的访问控制
  使用<Directory>配置区段
  每个文件夹自动继承其父目录的所有acl访问权限
  <Directory "/var/www">
    AllowOverride None
    # Allow open access:
    Require all granted      #允许所有
                denied(拒绝)
</Directory>

SELinux安全上下文（标签值）
  参照标准目录，重设新目录的属性
  chcon -R --reference=模板目录  新目录
  ls -Zd /webroot

###############################################################################

静态页面的运行
  服务端的原始页面 = 浏览器访问的页面
  由web服务软件处理所有请求：PHP网页、Python网页、JSP网页
  静态网站不需要翻译
动态网站的运行
  服务端的原始页面 不等于 浏览器访问的页面
  由web服务软件接受请求，动态程序转后端模块翻译：文本（html）
  动态网站需要其他软件翻译

1.部署 python 的页面
# cd /var/www/nsd02
# wget http://classroom.example.com/pub/materials/webinfo.wsgi
2.方便用户访问，网页跳转（网页别名）
# vim /etc/httpd/conf.d/nsd01.conf
  <VirtualHost *：80>
  ServerName webapp0.example.com
  DocumentRoor /var/www/nsd02
  Alias / /var/www/nsd02/webinfo.wsgi      #当用户访问网页文件根目录时，将webinfo.wsgi呈现
  </VirtualHost>
# systemctl restart httpd
# firefox webapp0.example.com
3.翻译Python页面
  安装 mod_wsgi软件
# vim /etc/httpd/conf.d/nsd01.conf
  <VirtualHost *：80>
  ServerName webapp0.example.com
  DocumentRoor /var/www/nsd02
  WsgiScriptAlias / /var/www/nsd02/webinfo.wsgi      #翻译网页  
  </VirtualHost>
# systemctl restart httpd
# firefox webapp0.example.com  
4.修改虚拟web主机的端口
# vim /etc/httpd/conf.d/nsd01.conf
  Listen 8909
  <VirtualHost *：8909>
  ServerName webapp0.example.com
  DocumentRoor /var/www/nsd02
  WsgiScriptAlias / /var/www/nsd02/webinfo.wsgi      #翻译网页  
  </VirtualHost>
5.修改,使用semanage工具调整
  增加新的端口，此操作需要足够内存空间/交换空间支持
# semanage port -l | grep http    #查看
# semanage port -a -t http_port_t -p tcp 8909
  -a添加 -t 类型 -p 协议
# systemctl restart httpd
 
###############################################################################

安全web服务
  https协议传输：安全的超文本传输协议 端口443
PKI公钥基础设施
  公钥：主要用来加密数据
  私钥：主要用来解密数据（与相应的公钥匹配）
  数字证书：证明拥有者的合法性/权威性（单位名称、有效期、公钥、颁发机构及签名）
  CA：数字证书授权中心：负责证书的申请/审核/颁发/鉴定/撤销等管理工作

1.部署网站证书（营业执照）
# cd /etc/pki/tls/certs   #存放证书
# wget http://classroom.example.com/pub/tls/certs/server0.crt
2.部署数字证书授权中心信息（根证书）（公安局信息）
# wget http://classroom.example.com/pub/example-ca.crt
3.部署私钥文件,用于解密数据
# cd /etc/pki/tls/private
# wget http://classroom.example.com/pub/tls/private/server0.key
4.安装支持安全web软件
# yum -y install mod_ssl
5.修改配置文件
# vim /etc/httpd/conf.d/ssl.conf
  vim末行模式下输入：set nu   #显示行号
 59 DocumentRoot "/var/www/myweb"    #去掉注释
 60 ServerName www0.example.com:443
 100 SSLCertificateFile /etc/pki/tls/certs/server0.crt   #指定网站证书
 107 SSLCertificateKeyFile /etc/pki/tls/private/server0.key   #指定私钥文件
 122 SSLCACertificateFile /etc/pki/tls/certs/example-ca.crt   #指定根证书（数字授权中心信息）
6.重启httpd服务
7.验证
# firefox https://www0.example.con

###############################################################################

邮件服务：主机名固定静态
虚拟机server0：
  设置永久主机名
虚拟机desktop0：
  设置永久主机名
电子邮件通信：电子邮件服务器的基本功能
  由用户提供电子邮箱存储空间（用户名@邮件域名）
  处理用户发出的邮件------传递给收件服务器
  处理用户收到的邮件------投递到邮箱
  SMTP(25)：用户发邮件协议
  pop3(110) 、 IMAP(143)：用户收邮件协议

快速部署 postfix 邮件服务器
虚拟机server0
  1.安装 postfix 软件
  2.修改主配置文件：/etc/postfix/main.cf
    99 myorigin = server0.example.com    #去掉注释修改为 server0.example.com 默认补全的域名后缀
    116 inet_interfaces = all            #修改为 all 本地所有网卡均支持邮件功能
    164 mydestination = server0.example.com   #修改为 server0.example.com 判断为本域邮件
  3.重启postfix服务
在本机虚拟机server0验证
  1.创建新用户：yg、xln
  2.收发信
  mail 发信操作
  mail -s '邮件标题'  -r 发件人  收件人[@收件域]
  mail 收信操作
  mail -u 用户名

###############################################################################

































































































