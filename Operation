Nginx
  俄罗斯人编写的十分轻量级的HTTP服务器
  是一个高性能的HTTP和反向代理服务器，同时也是一个IMAP/POP3/SMIP代理服务器
  官方网站:http://nginx.org
搭建Nginx服务器
  1.安装nginx-1.10.3.tar.gz
    useradd -s /sbin/nologin nginx   //创建禁止登录的用户nginx,方便在进行配置的时候指定用户和组
  2.升级nginx-1.12.2.tar.gz
    1)解压包
    # ./configure   \
    > --prefix=/usr/local/nginx   \ 
    > --user=nginx   \ 
    > --group=nginx  \
    > --with-http_ssl_module
    > --with-http_stub_status_module
    make
    # mv /usr/local/nginx/sbin/nginx  \
    >/usr/local/nginx/sbin/nginxold
    # cp objs/nginx  /usr/local/nginx/sbin/          //拷贝新版本
    # make upgrade                                   //升级
    2)客户端测试
  3.用户认证
    1)修改配置文件：/usr/local/nginx/conf/nginx.conf
    server {
       ......
     auth_basic "Input Password:";                   //认证提示符
     auth_basic_user_file "/usr/local/nginx/pass";   //认证密码文件
       ......
       }
    2)生成密码文件，创建用户及密码
    # yum -y install  httpd-tools
    # htpasswd -c /usr/local/nginx/pass   tom        //创建密码文件
    # htpasswd  /usr/local/nginx/pass   jerry        //追加用户，不使用-c选项
    # /usr/local/nginx/sbin/nginx -s reload          //重新加载配置文件
  4.虚拟主机
    1)修改配置文件
    2)创建网站根目录及对应首页文件
     mkdir /usr/local/nginx/目录
     echo写一个页面
    3)重启nginx服务
    4)客户端测试
    [root@client ~]# vim /etc/hosts
    192.168.4.5    www.a.com  www.b.com

###########################################################################################

SSL虚拟主机
    源码安装Nginx时必须使用--with-http_ssl_module参数，启用加密模块，对于需要进行SSL加密处理的站点添加ssl相关指令（设置网站需要的私钥和证书）。
    加密算法一般分为:对称算法、非对称算法、信息摘要。
      对称算法有：AES、DES，主要应用在单机数据加密。
      非对称算法有：RSA、DSA，主要应用在网络数据加密。
      信息摘要：MD5、sha256，主要应用在数据完整性校验、数据秒传等。

netstat命令可以查看系统中启动的端口信息，该命令常用选项如下
    -a显示所有端口的信息
    -n以数字格式显示端口号
    -t显示TCP连接的端口
    -u显示UDP连接的端口
    -l显示服务正在监听的端口信息，如httpd启动后，会一直监听80端口
    -p显示监听端口的服务名称是什么（也就是程序名称）

    1）生成私钥
      openssl genrsa > cert.key
    2）生成证书
      openssl req -new -x509 -key cert.key > cert.pem
    3）修改配置文件(文件默认有，取消注释即可)
    4）重启服务
    5）客户端验证
      /etc/hosts    www.c.com

************************************************

ab -c 20 -n 10000 http://192.168.4.254      //测试并发量

************************************************

#########################################################################################

部署LNMP环境
  安装部署Nginx、MariaDB、PHP环境
    安装部署Nginx、MariaDB、PHP、PHP-FPM；
    启动Nginx、MariaDB、FPM服务；
    并测试LNMP是否工作正常。
安装的软件列表
  nginx,gcc,pcre-devel,openssl-devel
  mariadb、mariadb-server、mariadb-devel
  php、php-fpm、php-mysql

FastCGI:多进程管理器，内存消耗大
  配置FastCGI(php-fpm)
    /etc/php-fpm.d/www.conf
     [www]
     listen = 127.0.0.1:9000         //PHP端口号
     pm.max_children = 32            //最大进程数量
     pm.start_servers = 15           //最小进程数量
     pm.min_spare_servers = 5        //最少需要几个空闲着的进程
     pm.max_spare_servers = 32       //最多允许几个进程处于空闲状态

LNMP常见问题
  Nginx的默认访问日志文件为/usr/local/nginx/logs/access.log
  Nginx的默认错误日志文件为/usr/local/nginx/logs/error.log
  PHP默认错误日志文件为/var/log/php-fpm/www-error.log
  如果动态网站访问失败，可用参考错误日志，查找错误信息。

关于Nginx服务器的地址重写，主要用到的配置参数是rewrite：
  rewrite regex replacement flag
  rewrite 旧地址 新地址 [选项]
   last 不再读其他rewrite
   break 不再读其他语句，结束请求
   redirect 临时重定向，地址栏也会变化
   permament 永久重定向

  location / {
    root   html;
    index  index.html index.htm;
    rewrite /a.html  /b.html;
    rewrite ^/(.*)$ http://www.tmooc.cn/$1;  
   }

修改配置文件(实现curl和火狐访问相同链接返回的页面不同)
  echo "I am Normal page" > /usr/local/nginx/html/test.html
  mkdir  -p  /usr/local/nginx/html/firefox/
  echo "firefox page" > /usr/local/nginx/html/firefox/test.html
  修改配置文件
    #这里，~符号代表正则匹配，*符号代表不区分大小写
   if ($http_user_agent ~* firefox) {            //识别客户端firefox浏览器
   rewrite ^(.*)$ /firefox/$1;
    }

#########################################################################################

Nginx调度器
  nginx反向代理
    使用upstream定义后端服务器集群，集群名称任意(如webserver)
    使用server定义集群中的具体服务器和端口
    通过proxy_pass将用户的请求转发给webserver集群
    通过ip_hash设置调度规则为：相同客户端访问相同服务器

  http {
	upstream webs {
	    ip_hash;
	    server ip地址:端口;
       }
  server {
      location / {
	    proxy_pass http://webs;
       }
  }
}

weight:设置服务器权重值，默认值为1
max_fails:设置最大失败次数
fail_timeout:设置失败超时时间，单位为秒
down:标记服务器已关机，不参与集群调度
backup:备份服务器

Nginx的TCP/UDP调度器
  编译安装必须要使用--with-stream参数开启4层代理模块,开启ngx_stream_core_module模块
  配置nginx服务器，添加服务器池，实现TCP/UDP反向代理功能
stream {
 upstream backend {
    server ip:端口;   //后端ssh服务器的ip和端口
  }
 server {
     listen 123456;   //nginx监听的端口
    proxy_connect_timeout 1s;
    proxy_timeout 3s;
    proxy_pass backend;
  }
}

测试：ssh ip地址 -p 123456

########################################################################################

优化nginx并发量
  ab -n 2000 -c 2000 http://192.168.4.5   //提示打开文件数量过多
  修改配置文件，增加并发量
  worker_processes  2;                    //与CPU核心数量一致
  worker_connections 65535;               //每个worker最大并发连接数
  优化linux内核参数（最大文件数量）
  ulimit -a       //查看所有属性
  ulimit -Hn 数字  //设置硬限制（临时）
  -Sn 数字           //软限制
配置文件:/etc/security/limits.conf
  * soft nofile 100000
  * hard nofile 100000
用户或组    硬限制或软限制    需要限制的项目   限制的值

location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
  expires 30d;            //定义客户端缓存时间为30天
}

查看服务器状态
  location /status {
                stub_status on;
        }
Active connections：当前活动的连接数量。
Accepts：已经接受客户端的连接总数量。
Handled：已经处理客户端的连接总数量（一般与accepts一致，除非服务器限制了连接数量）。
Requests：客户端发送的请求数量。
Reading：当前服务器正在读取客户端请求头的数量。
Writing：当前服务器正在写响应信息的数量。
Waiting：当前多少客户端在等待服务器的响应。

对页面进行压缩处理
  gzip on;                            //开启压缩
  gzip_min_length 1000;                //小文件不压缩
  gzip_comp_level 4;                //压缩比率
  gzip_types text/plain text/css application/json application/x-javascript text/xml  \
  application/xml application/xml+rss text/javascript;
     //对特定文件压缩，类型参考mime.types

服务器内存缓存
http{
  open_file_cache max=2000 inactive=20s;   //设置服务器最大缓存2000个文件句柄，关闭20秒内无请求的文件句柄
  open_file_cache_valid    60s;            //文件句柄的有效时间是60秒，60秒后过期
  open_file_cache_min_uses 5;               /只有访问次数超过5次会被缓存
  open_file_cache_errors   off;
}

修改Nginx配置文件，自定义报错页面
  error_page   404  /40x.html;    //自定义错误页面
vim /usr/local/nginx/html/40x.html        //生成错误页面
Oops,No NO no page …

#########################################################################################

memcached:高性能的分布式缓存服务器
  用来集中缓存数据库查询结果，减少数据库访问次数，以提高动态web应用的响应速度
  官方网站:http://memcached.ord/

add name 0 180 10	      //变量不存在则添加
set name 0 180 10	      //添加或替换变量
replace name 0 180 10	//替换
get name	            //读取变量
append name 0 180 10     //向变量中追加数据
delete name	            //删除变量
stats	                  //查看状态
flush_all	            //清空所有
提示：0表示不压缩，180为数据缓存时间，10为需要存储的数据字节数量

  1.安装软件memcached并启动,端口：11211
  2.配置文件:/usr/lib/systemd/system/memcached.service
  3.使用telnet访问memcached服务器
    安装telnet
   telnet 主机ip 11211

#########################################################################################

LNMP+memcached
  1.部署lnmp环境
  2.启服务
  3.创建PHP页面，使用PHP语言测试memcached服务
  建PHP首页文档/usr/local/nginx/html/index.php，测试页面可以参考lnmp_soft/php_scripts/mem.php
  4.客户端测试（结果会失败）
！！！！注意：这里因为没有给PHP安装扩展包，默认PHP无法连接memcached数据库，需要给PHP安装扩展模块才可以连接memcached数据库。
  安装扩展包：php-pecl-memcache
  重启php-fpm服务
  再次测试（成功）
PHP的本地Session信息
  1.部署后端lnmp服务器相关软件
  2.启服务
  3.部署前端nginx调度服务器，重新加载配置文件
  4.测试环境是否配置成功
  5.部署测试页面
   测试页面可以参考lnmp_soft/php_scripts/php-memcached-demo.tar.gz
  源码解包：tar -xf php-memcached-demo.tar.gz
  cp -a * /usr/local/nginx/html   //拷贝所有
  测试
  查看服务器本地的Session信息：/var/lib/php/session   //id时随机的
！！！！注意：可用修改index.php和home.php两个文件的内容，添加页面颜色属性，以区别后端两台不同的服务器:<body bgcolor=green>。

//填写注册信息后，刷新，还需要再次注册，说明两台计算机使用的是本地Session
//第二台主机并不知道你再第一台主机已经登录，第一台主机的登录信息也没有传递给第二台主机

#########################################################################################

PHP实现session共享
  1.构建memcached 服务并启动
  2.在后端LNMP服务器上部署Session共享
    安装扩展软件:php-pecl-memcache
    修改配置文件：/etc/php-fpm.d/www.conf
       //在最后里那个行修改
    修改前效果如下:
    php_value[session.save_handler] = files
    php_value[session.save_path] = /var/lib/php/session
      //原始文件，默认定义Sessoin会话信息本地计算机（默认在/var/lib/php/session）

    修改后效果如下:
    php_value[session.save_handler] = memcache
    php_value[session.save_path] = "tcp://192.168.2.5:11211"
      //定义Session信息存储在公共的memcached服务器上，主机参数中为memcache（没有d）
      //通过path参数定义公共的memcached服务器在哪（服务器的IP和端口）
    重启php-fpm
  3.客户端测试

#########################################################################################

Java:一种跨平台的、面向对象的程序设计语言，java技术具有卓越的通用性、高效性、平台移植性和安全性
  体系：
    java SE（标准版）
    java EE（企业版）
    java ME（移动版）
JDK：是Sun针对java开发者推出的java语言的软件开发工具包
  jdk是整个java的核心
  包括java运行环境
  java工具（编译、排错、打包）
  java基础的类库
JRE：是JDK的子集
  java虚拟机
  java核心类库和支持文件
  不包含开发工具（JDK）--编译器、调试器和其他工具
Java Servlet
  servlet是java扩展web服务器功能的组件规范
  常见servlet容器
    websphere(IBM)
    weblogic(Oracle)
    tomcat(Apache)
    jboss(RedHat)

部署Tomcat服务器：端口：8080
  1.部署Tomcat服务器软件
    安装软件包：java-1.8.0-openjdk、java-1.8.0-openjdk-headless
  java -version   //查看JAVA版本
  2.安装tomcat
    解包：apache-tomcat-8.0.30.tar.gz
   mv apache-tomcat-8.0.30  /usr/local/tomcat   //移动
   ls /usr/local/tomcat
    bin/     //主程序目录
    lib/     //库文件目录
    logs/    //日志目录  
    temp/    //临时目录
    work/    //自动编译目录jsp代码转换servlet
    conf/    //配置文件目录
    webapps/ //页面目录
   3.启动服务
    /usr/local/tomcat/bin/startup.sh
   4.客户端浏览测试页面（8080端口）

部署基于域名的虚拟主机
  1.修改server.xml配置文件，创建两个域名的虚拟主机
    <Host name="www.a.com" appBase="a" unpackWARS="true" autoDeploy="true">
    </Host>
    <Host name="www.b.com" appBase="b" unpackWARS="true" autoDeploy="true">
    </Host>
  2.创建虚拟主机对应的页面根路径
    mkdir -p  /usr/local/tomcat/{a,b}/ROOT
    echo "AAA"   > /usr/local/tomcat/a/ROOT/index.html
    echo "BBB" > /usr/local/tomcat/b/ROOT/index.html
  3.重启Tomcat服务器
    客户端设置host文件，并浏览测试页面进行测试（注意访问的端口为8080）

使用docBase参数可以修改默认网站首页路径
    <Context path="" docBase="base" reloadable="true"/>
    mkdir  /usr/local/tomcat/b/base
    echo "BASE" > /usr/local/tomcat/b/base/index.html
    重启服务
    测试

跳转
  当用户访问http://www.a.com/test打开/var/www/html目录下的页面
    修改配置文件
    <Context path="/test" docBase="/var/www/html/" />
    重启服务

配置Tomcat支持SSL加密网站
  创建加密用的私钥和证书文件
    keytool -genkeypair -alias tomcat -keyalg RSA -keystore /usr/local/tomcat/ 
    keystore                //提示输入密码为:123456
    //-genkeypair     生成密钥对
    //-alias tomcat     密钥别名
    //-keyalg RSA     定义密钥算法为RSA算法
    //-keystore         定义密钥文件存储在:/usr/local/tomcat/keystore

  再次修改server.xml配置文件，创建支持加密连接的Connector
    [root@web1 ~]# vim /usr/local/tomcat/conf/server.xml
    … …
    <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
    maxThreads="150" SSLEnabled="true" scheme="https" secure="true"
    keystoreFile="/usr/local/tomcat/keystore" keystorePass="123456" clientAuth="false"
    sslProtocol="TLS" />
    //备注，默认这段Connector被注释掉了，打开注释，添加密钥信息即可

配置Tomcat日志
  1.为每个虚拟主机设置不同的日志文件
  2.重启
  3.查看服务器日志文件：/usr/local/tomcat/logs/

配置Tomcat集群
  1.在后端服务器上配置nginx调度器
  2.分别在前端机器上配置tomcat调度器
    安装软件java-1.8.0-openjdk  、java-1.8.0-openjdk-headless
    源码解包：apache-tomcat-8.0.30.tar.gz
    移动目录到：/usr/local/tomcat
  3.启服务

使用Varnish加速Web
  部署Varnish缓存服务器
    1.安装软件：readline-devel gcc ncurses-devel  pcre-devel python-docutils-0.11-0.2.20130715svn7687.el7.noarch.rpm
   2.创建varnish用户  //不能登录的/sbin/nologin
     源码解包：varnish-5.2.1.tar.gz
   3.复制启动脚本及配置文件
     cp  etc/example.vcl   /usr/local/etc/default.vcl
   4.修改代理配置文件，启服务
   5.客户端测试

更新缓存数据，在后台web服务器更新页面内容后，用户访问代理服务器看到的还是之前的数据，说明缓存中的数据过期了需要更新（默认也会自动更新，但非实时更新）
  varnishadm
    varnish> ban req.url ~ .*    //清空缓存数据，支持正则表达式

！！！！提示：如果检查端口时，8005端口启动非常慢，可用使用下面的命令用urandom替换random（非必须操作）。
# mv /dev/random  /dev/random.ba
# ln -s /dev/urandom  /dev/random

##########################################################################################

Subversion:是一个自由/开原的版本控制系统
  在subversion管理下，文件和目录可以超越时空
  允许数据恢复到早期版本
  可以跟踪修改
subversion版本库管理工具
  1.安装软件：subversion
  2.创建版本库
   mkdir /var/svn
   svnadmin create /var/svn/project
  3.本地导入初始化数据
   想导入那个目录的文件，就cd到那个目录
   svn import . fire:///var/svn/project/ -m "xxx"
  3.修改配置文件，创建用户和密码（3个文件从右往左修改）
  4.启服务
    svnserve -d -r /var/svn/project   //共享单个仓库
    svnserve -d     //共享所有
  -d：以守护进程方式运行
  -r：设置一个虚拟路径，默认客户端要指定绝对路径访问库
  
客户端测试
  1.将服务器代码下载到本地
   cd /tmp
   svn --username 用户 --password 密码 co svn://192.168.2.100/code
    //建立本地副本,从服务器192.168.2.100上co下载代码到本地code目录
    //用户名harry,密码pass

svn常用选项：
  co：下载
  ci：上传
  info：查看版本仓库基本信息
  log：查看日志
  add：可以将文件加入版本控制
  update：更新
svn merge -r7:2    tuned.service   //将文件从版本7还原到版本2

svn import . file:///路径 -m "任意写"
svn --username 用户名 --pasword 密码 co svn://ip地址/ code

##########################################################################################

制作nginx的RPM包
  1.安装软件：rpm-bulid
  2.生成rpmbulid目录结构
   rpmbulid -ba nginx.spec   //会报错，没有文件或目录
   ls /root/rpmbulid         //自动生成的目录结构
  3.将源码软件复制到SOURCES目录
   cp nginx-1.12.2.tar.gz /root/rpmbuild/SOURCES/
  4.创建并修改SPEC配置文件
   %port   #后面可以跟任何命令

####################################################################################

ip后面跟link，address show 也可以查ip地址

VPN技术：
  GRE:Window不支持，linux支持，思科的一些网络设备支持
  PPTP：window（拨号），数据不加密
  L2TP+IPSec:拨号，加密
  SSL
配置GRE VPN
  1.启用GRE模块
    lsmod    //显示模块列表
    lsmod | grep ip_gre   //确定是否加载了gre模块
    modprobe ip_gre   //加载模块
    modinfo ip_gre    //查看模块信息
  2.client主机创建VPN隧道
    # ip tunnel add tun0  mode gre remote 201.1.2.5 local 201.1.2.10
    //ip tunnel add创建隧道（隧道名称为tun0），ip tunnel help可以查看帮助
    //mode设置隧道使用gre模式
    //local后面跟本机的IP地址，remote后面是与其他主机建立隧道的对方IP地址
    启用隧道
    ip link show
    ip link set tun0 up
    ip link show
    为VPN配置ip地址
    ip addr add 10.10.10.10/24 peer 10.10.10.5/24 dev tun0
      //为隧道tun0设置本地IP地址（10.10.10.10.10/24） //dev设备
      //隧道对面的主机IP的隧道IP为10.10.10.5/24
    ip a s   //查看ip地址
    关防火墙，selinux
  3.proxy主机创建VPN隧道------同client操作一样
  4.开启路由转发、关闭防火墙(0关闭，1打开)
    echo "1" > /proc/sys/net/ipv4/ip_forward
  5.ping 测试连通性

创建 PPTP VPN
  安装软件包：yum localinstall pptpd-1.4.0-2.el7.x86_64.rpm
  rpm -qc pptpd   //查看有什么文件
  修改配置文件：/etc/pptpd.conf
    localip 201.1.2.5         //服务器本地IP
    remoteip 192.168.3.1-50   //分配给客户端的IP池
  /etc/ppp/options.pptpd
    require-mppe-128     //使用MPPE加密数据
    ms-dns 8.8.8.8       //DNS服务器
  /etc/ppp/chap-secrets   //修改账户配置文件
    jacob    *   123456      *
     //用户名 服务器标记    密码    客户端
  启动服务
  翻墙设置：iptables -t nat -A POSTROUTING -s 192.168.3.0/24 -j SNAT --to-source 201.1.2.5

require-machap-v2   //需要输入密码才能访问vpn

####################################################################################

pssh遠程連接
  軟件包:pssh-2.3.1-5.el7.noarch.rpm
  修改本地/etc/hosts/解析文件
  創建主機列表
語法格式:
  pssh 參數 主機列表 輸出信息
  pssh -i  -A -H  'host1 host2 host3' -x '-o StrictHostKeyChecking=no'   echo hello
  pssh -A -h host.txt echo hello

pssh提供并发远程连接功能
  -A:使用密码远程其他主机（默认使用密钥）
  -i:将输出显示在屏幕
  -H:设置需要连接的主机
  -h:设置主机列表文件
  -p:设置并发数量
  -t:设置超时时间
  -x:传递参数给ssh
  -o dir:设置标准输出信息保存的目录
  -e dir:设置错误输出信息保存的目录

使用密鑰、多并发远程其他主机
  产生密钥：ssh-keygen
  传递密钥：ssh-copy-id /root/.ssh/id_rsa.pub 主机
批量多并发拷贝数据到其他主机
  语法格式：pscp.pssh 参数 主机列表 /etc /tmp
从其他主机下载
  pslurp -r -h 主机列表 -L /media /etc /tmp
  punke:杀死进程










                                                                                                                         









































