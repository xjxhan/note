Linux基本防护措施
  修改：
  chage -l 账户名称   //查看
  chage -E 时间 账户名称   //修改有效期
  /etc/login.defs:配置文件,决定了账户密码的默认有效期
  锁定：
  passwd -l 账户   //锁定
  passwd -S 账户   //查看状态
  -u:解锁
修改tty登录的提示信息，隐藏系统版本
  etc/issue这个配置文件里保存的就是这些登陆信息，修改该文件防止内核信息泄露。
  ！！！！操作时，记得先备份
锁定文件/etc/resolv.conf、/etc/hosts
  # chattr +i  文件名     //锁定文件（无法修改、删除等）,无法保存
  # chattr -i  文件名     //解锁文件
  # chattr +a  文件名     //锁定后文件仅可追加
  # chattr -a  文件名     //解锁文件
  # lsattr 文件名          //查看文件特殊属性

/etc/fstab:defauts后加上noatime
ctime:状态修改时间（显示的是文件的权限、拥有者、所属的组、链接数发生改变时的时间）
atime:访问时间（显示的是文件中的数据最后被访问的时间）
mtime:修改时间（显示的是文件内容被修改的最后时间）

使用sudo分配管理权限
su(Substitute User)命令
  可以快速切换账户身份
  普通用户切换账户身份时需要输入密码，
  root使用su命令切换任何身份都不需要密码
  su - 账户名称
  su - 账户 -c ‘命令’
  whoami:查看当前登录的用户
  su:切换到其他用户，但是不切换环境变量
  su -:是完整的切换到一个用户变量环境
  sudo -l:可以查看能运行什么命令
vim和visudo
  /etc/sudoers:改错不提示（带颜色）
  visudo：改错会提示（每颜色）
softadm ALL=(ALL) /usr/bin/systemctl   //授权用户以root身份执行什么命令，多条命令用逗号隔开
！！！！加!取反
which/:可以查看命令在那个目录下
atd:是linux下 一次性定时计划任务命令的守候进程
为sudo机制启用日志记录
  修改配置文件：/etc/sudoers
    Defaults  logfile="/var/log/sudo"    //追加的

提高SSH服务安全
  调整sshd服务配置，并重载服务
  Protocol 2   //去掉SSH协议V1
  PermitRootLogin no  //禁止root用户登录
  PermitEmptyPasswords no   //禁止密码为空的用户登录
  UseDNS  no  //不解析客户机地址
  LoginGraceTime  1m  //登录限时
  MaxAuthTries  3  //每连接最多认证次数
针对SSH访问采用仅允许的策略，未明确列出的用户一概拒绝登录
  配置文件：/etc/sudoers
  AllowUsers useradm@192.168.4.0/24  //定义账户白名单
  ##DenyUsers USER1 USER2   //定义账户黑名单
  ##DenyGroups GROUP1 GROUP2  //定义组黑名单
  ##AllowGroups GROUP1 GROUP2  //定义组白名单
！！！！！调整sshd服务配置，将PasswordAuthentication设为no，可以用密钥登

SELinux
  targeted:只限制一些常用的网络服务的程序
chcon --reference=/var/ftp/d1.tar.gz /var/ftp/d2.tar.g
SELinux安全上下文（标签值）
  参照标准目录，重设新目录的属性
  chcon -R --reference=模板目录  新目录
  ls -Zd /webroot
  chcon -t public_content_t /var/ftp/d2.tar.gz
  restorecon /var/ftp/d2.tar.gz

########################################################################################

加密与解密应用
  加密算法主要有以下几种分类：
    1.为确保数据机密性算法：
    a) 对称加密算法(AES,DES)
    b) 非对称加密算法（RSA，DSA）
    2.为确保数据完整性算法：
    a) 信息摘要（MD5，SHA256，SHA512）
 GPG对称加密方式保护文件 
    GnuPG是非常流行的加密软件，支持所有常见加密算法，并且开源免费使用。
    安装软件：gnupg2
   gpg -c 文档:加密
 # gpg -c a.txt    //加密
 # cat a.txt.gpg   //查看加密数据为乱码
 # gpg -d a.txt.gpg a.txt   //解密，解密的时候可以把原来要加密的文件删除

 GPG非对称加密（需要密钥）
    非对称加密/解密文件时，UserA生成私钥与公钥，并把公钥发送给UserB，UserB使用公钥加密数据，并把加密后的数据传给UserA，UserA最后使用自己的私钥解密数据。
  # gpg --gen-key     //创建密钥
  # gpg --list-keys   //查看
  # gpg -a --export 姓名 > 导出的地址   //导出公钥
    //--export的作用是导出密钥，-a的作用是导出的密钥存储为ASCII格式
  # scp将密（公）钥传给其他虚拟机
  # 接收的虚拟机，将密钥导入到自己的文件里
    gpg --import 密钥
  # echo写一个文件
  # gpg -e -r 姓名 文件   //加密
  # scp将加密文件在传回去
  # gpg -d 加密文件 > 文件名   //解密
使用GPG的签名机制，检查数据来源的正确性
  # gpg -b 选项   //创建分离式数字签名
  # scp将签名文件与签名传给其他虚拟机
  # gpg --verify 签名与签名文件   //在接收签名的机器上，验证签名

########################################################################################

AIDE做入侵检测
  1.yum -y install aide
  2.修改配置文件：
  3.aide --init   //入侵前校验
   AIDE, version 0.15.1
   AIDE database at /var/lib/aide/aide.db.new.gz initialized.
   //生成校验数据库，数据保存在/var/lib/aide/aide.db.new.gz
  4.备份数据库，将数据库文件拷贝到U盘
  # cp /var/lib/aide/aide.db.new.gz   /media/
  5.入侵后检测
  # cd /var/lib/aide/
  # mv aide.db.new.gz aide.db.gz
  # aide --check    //检查哪些数据发生了变化

########################################################################################

扫描与抓包分析
  软件:nmap
  基本用法：
# nmap  [扫描类型]  [选项]  <扫描目标 ...>
  常用的扫描类型:
  -sS，TCP SYN扫描（半开）
  -sT，TCP 连接扫描（全开）
  -sU，UDP扫描
  -sP，ICMP扫描
  -A，目标系统全面分析
  -n:不查DNS
  -p:可以跟端口
# nmap -sP 192.168.4.100   //检测主机是否开启
# nmap -sP 192.168.2.0/24  //检测网段有哪些主机开启
# nmap -p 21-22 192.168.4.0/24   //检查192.168.4.0/24网段内哪些主机开启了FTP、SSH服务
# nmap -n -sP 192.168.4.0/24     //检查192.168.4.0/24网段内哪些主机可以ping通

使用tcpdump分析FTP访问中的明文交换信息
  启用tcpdump命令行抓包
监控选项如下：
  -i，指定监控的网络接口！！！！
  -A，转换为 ACSII 码，以方便阅读
  -w，将数据包信息保存到指定文件
  -r，从指定文件读取数据包信息
tcpdump的过滤条件：
  类型：host、net(一个网段)、port、portrange(端口范围)
  方向：src(源地址)、dst（目标地址）
  协议：tcp、udp、ip、vlan、arp（广播，给一个ip返回一个mac地址）、……
  多个条件组合：and、or、not

echo "tom:123456" | base64   //

########################################################################################

部署audit监控文件
  audit:审计工具（启动关不掉）
  审计的目的是基于事先配置的规则生成日志，记录可能发生在系统上的事件（正常或非正常行为的事件），审计不会为系统提供额外的安全保护，但她会发现并记录违反安全策略的人及其对应的行为。
  审计能够记录的日志内容：
   a) 日期与事件以及事件的结果
   b) 触发事件的用户
   c) 所有认证机制的使用都可以被记录，如ssh等
   d) 对关键数据文件的修改行为等都可以被记录
1.装包:audit
  查看配置文件:/etc/audit/auditd.conf      //确定日志位置
  log_file = /var/log/audit/audit.log   //日志文件路径
2.配置审计规则
  auditctl -s   //查询状态
  -l：查看规则
  -D：删除所有规则
  临时定义文件系统规则：
  语法格式：auditctl -w path -p permission -k key_name
  path为需要审计的文件或目录
  权限可以是r,w,x,a(文件或目录的属性发生变化)
  Key_name为可选项，方便识别哪些规则生成特定的日志项
# auditctl  -w  /etc/passwd  -p wa  -k  passwd_change
   //设置规则所有对passwd文件的写、属性修改操作都会被记录审计日志
# auditctl  -w  /etc/selinux/  -p wa  -k  selinux_change
   //设置规则，监控/etc/selinux目录
# auditctl  -w  /usr/sbin/fdisk  -p x  -k  disk_partition
   //设置规则，监控fdisk程序
# auditclt  -w  /etc/ssh/sshd_conf  -p warx  -k  sshd_config
   //设置规则，监控sshd_conf文件

永久规则，修改配置文件:/etc/audit/rules.d/audit.rules

通过工具搜索日志
  系统提供的ausearch命令可以方便的搜索特定日志，默认该程序会搜索/var/log/audit/audit.log，ausearch options -if file_name可以指定文件名
# ausearch -k sshd_config -i    //根据key搜索日志，-i选项表示以交互式方式操作

########################################################################################

加固常见服务的安全
  Nginx安全优化包括：删除不要的模块、修改版本信息、限制并发、拒绝非法请求、防止buffer溢出。
  MySQL安全优化包括：初始化安全脚本、密码安全、备份与还原、数据安全。
  Tomcat安全优化包括：隐藏版本信息、降权启动、删除默认测试页面.
nginx进行编译时
>--without-http_autoindex_module \            //禁用自动索引文件目录模块
>--without-http_ssi_module

server_tokens off;   //隐藏版本号

限制并发量
  DDOS攻击者会发送大量的并发连接，占用服务器资源（包括连接数、带宽等），这样会导致正常用户处于等待或无法访问服务器的状态。
  Nginx提供了一个ngx_http_limit_req_module模块，可以有效降低DDOS攻击的风险
修改配置文件在http里面追加:limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;
备注说明：
  limit_req_zone语法格式如下：
    limit_req_zone key zone=name:size rate=rate;
    上面案例中是将客户端IP信息存储名称为one的共享内存，内存空间为10M
    1M可以存储8千个IP信息，10M可以存储8万个主机连接的状态，容量可以根据需要任意调整
    每秒中仅接受1个请求，多余的放入漏斗
    漏斗超过5个则报错 

拒绝非法的请求
  网站使用的是HTTP协议，该协议中定义了很多方法，可以让用户连接服务器，获得需要的资源。但实际应用中一般仅需要get和post。

curl命令说明:
  -I,i:访问服务器页面时，显示HTTP的头部信息
  -X:指定请求服务器的方法
# curl -i -X GET http://192.168.4.5    //页面头部信息都显示
# curl -i -X HEAD http://192.168.4.5   //只显示头部信息

修改配置文件让nginx拒绝非法请求(在server里面追加)
  if ($request_method !~ ^(GET|POST)$ ) {
       return 444;
   }    
  #这里，!符号表示对正则取反，~符号是正则匹配符号
  #如果用户使用非GET或POST方法访问网站，则retrun返回444的错误信息

防止buffer溢出
  当客户端连接服务器时，服务器会启用各种缓存，用来存放连接的状态信息。
  如果攻击者发送大量的连接请求，而服务器不对缓存做限制的话，内存数据就有可能溢出（空间不足）
修改Nginx配置文件，调整各种buffer参数，可以有效降低溢出风险。
  //在http里追加
  client_body_buffer_size  1K;
  client_header_buffer_size 1k;
  client_max_body_size 1k;
  large_client_header_buffers 2 1k;

########################################################################################

数据库安全
安装完MariaDB或MySQL后，默认root没有密码，并且提供了一个任何人都可以操作的test测试数据库。有一个名称为 mysql_secure_installation的脚本，该脚本可以帮助我们为root设置密码，并禁止root从远程其他主机登陆数据库，并删除测 试性数据库test。
  systemctl status mariadb
  mysql_secure_installation

数据备份与还原
  首先，备份数据库：
  mysqldump -uroot -p123456 mydb table > table.sql      //备份数据库中的某个数据表
  mysqldump -uroot -p123456 mydb > mydb.sql             //备份某个数据库
  mydqldump -uroot -p123456 --all-databases > all.sql   //备份所有数据库
接下来，还原数据库：
  mysql -uroot -p123456 mydb < table.sql                //还原数据表
  mysql -uroot -predhat mydb  < mydb.sql                //还原数据库
  mysql -uroot -predhat < all.sql                       //还原所有数据库

grant all on *.* to tom@'%' identified by '123';        //创建一个新账户tom
  %：允许所有主机

########################################################################################

Tomcat安全性
  隐藏版本信息、修改tomcat主配置文件（隐藏版本信息）
# yum -y install java-1.8.0-openjdk-devel
# cd /usr/local/tomcat/lib/
# jar -xf catalina.jar
# vim org/apache/catalina/util/ServerInfo.properties   //根据自己的需要，修改版本信息的内容
再次修改tomcat服务器配置文件，修改版本信息，手动添加server参数：
<Connector port="8080" protocol="HTTP/1.1"
connectionTimeout="20000"  redirectPort="8443" server="jacob" />

降级启动
  默认tomcat使用系统高级管理员账户root启动服务，启动服务尽量使用普通用户。
  useradd tomcat
  chown -R tomcat:tomcat /usr/local/tomcat
  //修改tomcat目录的权限，让tomcat账户对该目录有操作权限
  su -c /usr/local/tomcat/bin/startup.sh tomcat
  //使用su命令切换为tomcat账户，以tomcat账户的身份启动tomcat服务

########################################################################################

tree:竖状看目录
使用diff和patch工具打补丁
  1.写两个不一样的文件
  2.diff查看不同
   diff -u 查看差异，包含头部信息
  3.生成补丁
   diff -u 文件1 文件2 > test.patch（补丁文件）
  4.使用patch命令打补丁
    安装patch软件
   patch -p0 < test.patch    //打补丁
   patch -RE < test.patch    //还原旧版本，反向修复

patch -pnum（其中num为数字，指定删除补丁文件中多少层路径前缀）
如原始路径为/u/howard/src/blurfl/blurfl.c
  -p0则整个路径不变
  -p1则修改路径为u/howard/src/blurfl/blurfl.c
  -p4则修改路径为blurfl/blurfl.c
  -R(reverse)反向修复，-E修复后如果文件为空，则删除该文件

对比目录中所有文件的差异 
  1.新建目录mkdir
   在新建目录里在新建两个目录mkdir {mulu1,mulu2}
   分别在两个目录写不同文件echo 
   echo "xx" > mulu1/test.txt   //mulu1里没有
！！！！注意：两个目录下find和test.sh文件内容不同，source2有tmp.txt而source1没有该文件
  2.制作补丁文件diff -u
   diff -Nu      //对比了test.sh，并且使用source2目录的tmp.txt与source1的空文件对比差异
   diff -Nua     //对比了test.sh、tmp.txt、find(程序)
  3.diff -Nuar   //使用patch命令对目录下的所有代码打补丁
  4.cat 补丁文件   //对比的文件有路径信息
  5.cd到mulu1
     patch -p1 < ../补丁文件   //打补丁
      ..:父目录，上一级

diff制作补丁文件的原理：告诉我们怎么修改第一个文件后能得到第二个文件。
这样如果第一个版本的脚本有漏洞，我们不需要将整个脚本都替换，仅需要修改有问题的一小部分代码即可，diff刚好可以满足这个需求！
像Linux内核这样的大块头，一旦发现有一个小漏洞，我们不可能把整个内核都重新下载，全部替换一遍，而仅需要更新有问题的那一小部分代码即可！
diff命令常用选项：
  -u	输出统一内容的头部信息（打补丁使用），计算机知道是哪个文件需要修改
  -r	递归对比目录中的所有资源（可以对比目录）
  -a	所有文件视为文本（包括二进制程序）
  -N	无文件视为空文件（空文件怎么变成第二个文件）
N选项备注说明：
  A目录下没有txt文件，B目录下有txt文件
  diff比较两个目录时，默认会提示txt仅在B目录有（无法对比差异，修复文件）
  diff比较时使用N选项，则diff会拿B下的txt与A下的空文件对比，补丁信息会明确说明如何从空文件修改后变成txt文件，打补丁即可成功！


########################################################################################

特殊情况

单棱翻公式（O特公式）

Rw U2 CR (Rw U2)2 Rw' U2	   Lw U2 Rw' U2 Rw U2 Rw' U2	  Rw'
三上一下                            三下一上 

对棱
Uw2 ( MR2 U2 )2 MR2 Uw2




















########################################################################################




















